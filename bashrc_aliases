# docker aliases & functions
alias dps='docker ps'
alias drm='docker rm'
alias drmi='docker rmi'
alias drmall='docker rm -f $(docker ps -a -q)'
alias drmiall='docker rmi -f $(docker images -q)'

docker-reset() {
    drmall
    drmiall
}

GIT_PS1_SHOWDIRTYSTATE='True'
source ~/.git-prompt.sh
PROMPT_COMMAND='__git_ps1 "\w\[\033[0;36m\]" "\[\033[m\]\\\$ "'
PROMPT_COMMAND="$PROMPT_COMMAND"'$([ -n "$TMUX" ] && tmux setenv TMUXPWD_$(tmux display -p "#D" | tr -d %) "$PWD")'

# create and activate a new virtualenv in the current directory
mkvenv() {
    PY_VERSION=${1:-"3.6"}
    VENV_DIR=${HOME}/.venvs/${PWD##*/}/${PY_VERSION}
    if [ ! -d $VENV_DIR ];
    then
        PYTHON_BINARY=$(which "python${PY_VERSION}_user")
        if [ -z $PYTHON_BINARY ]
        then
            echo "unknown python version: ${PY_VERSION}"
            exit 1
        fi

        virtualenv -p "${PYTHON_BINARY}" "${VENV_DIR}"

        source ${VENV_DIR}/bin/activate

        pip install --upgrade pip > /dev/null

        if [ -e ./requirements-dev.txt ];
        then
            pip install -r requirements-dev.txt
        elif [ -e ./requirements.txt ];
        then
            pip install -r requirements.txt
        fi
    else
        source ${VENV_DIR}/bin/activate
    fi
}

rmvenv() {
    PY_VERSION=${1:-"3.6"}
    VENV_DIR=${HOME}/.venvs/${PWD##*/}/${PY_VERSION}
    if [ -d ${VENV_DIR} ];
    then
        if type deactivate > /dev/null;
        then
            deactivate
        fi
        rm -r ${VENV_DIR}
    fi
}
